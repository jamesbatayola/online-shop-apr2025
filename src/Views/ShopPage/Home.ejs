<%- include('../Shared/Head.ejs') %>
    <title>Online Shop | Home</title>
</head>

<body>
    <%- include('../Shared/Navbar.ejs') %>

    <div class="container">
        
        <div>
            <form>
                <input class="search-input" type="text">
                <button type="submit" >Search</button>
            </form>
        </div>

        <div class="products-container">

            <% if(products.length <= 0) { %>
                <h1>No product</h1>
                <%  return %>
            <% }  %>

            <% for(let product of products) { %>
                <div class="product">
                    <input type="text" value="<%= product.id %>" readonly hidden>
                    <img src="/img/<%= product.image_url === 'null' ? 'images_placeholder.png' : product.image_url %>" alt="Product Image">
                    <h3><%= product.name %></h3>
                    <div>P<%= product.price %></div>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint id nostrum optio voluptate atque sit quam, quidem nulla illo possimus amet magni animi nihil ad quae quis, omnis qui doloribus?</p>
                    <button class="add_to_cart_button" >Add to cart</button>
                </div>
            <% } %>

        </div>
    </div>

</body>

<script>

    document.querySelector('form').addEventListener('submit', async(ev) => {
        ev.preventDefault();

        const search_input = document.querySelector('.search-input').value;

        const res = await fetch(`http://localhost:11111/shop/home/search=${search_input}`);

        const obj = await res.json();

        console.log(obj);
    })

    // ADD TO CART BUTTON LISTENER
    document.querySelectorAll('.add_to_cart_button').forEach(btn => {
        btn.addEventListener('click', async (ev) => {
            ev.preventDefault();

            const product_id = ev.target.parentElement.children[0].value.trim();

            const res = await fetch(`http://localhost:11111/shop/addcart/${product_id}`, {
                method: "POST",
            });

            // const obj = await res.json();
            // console.log(obj);
        })
    }) 

</script>

<style>
    .container {
        width: 90%;
        margin: 1rem auto;
        border: 1px solid black;
        padding: 1rem;
    }

    .products-container {
        border: 1px solid red;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 2rem;
    }

    .product {
        display: flex;
        flex-direction: column;
        gap: 5px;
        width: 250px;
        height: 300px;
        border: 1px solid black;
        transition: 200ms;
        cursor: pointer;
        padding: 7px;
    }

    .product:hover {
            transform: scale(1.1);
            background-color: blue;
    }

    img {
        height: 60%;
        width: 100%;
        border-radius: 0.3rem;
        object-fit: cover;
        object-position: center;
        display: block;
    }
    
    p {
        display: -webkit-box;             /* Make the element behave like a flex container with multiple lines */
        -webkit-box-orient: vertical;     /* Defines the box's orientation (vertical to wrap text) */
        -webkit-line-clamp: 3;            /* Limit to 3 lines (adjust as needed) */
        overflow: hidden;                 /* Hide the overflow text */
        text-overflow: ellipsis;          /* Add the ellipsis when text overflows */
        line-height: 1.5;     
        font-size: 0.75rem;
    }

</style>
