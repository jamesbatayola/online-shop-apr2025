<%- include('../Shared/Head.ejs') %>
    <title>Online Shop | Admin</title>
</head>

<body>
    <%- include('../Shared/Navbar.ejs') %>

    <input class="csrfToken" type="hidden" value="<%= csrfToken %>" readonly>

    <div class="container">

        <div class="admin-navbar" >
            <a class="create-product" > <button>Create Product</button></a>
           <a class="my-product" ><button>My Product</button></a>
        </div>

        <div class="admin-content">

            <form enctype="multipart/form-data">
                <div>
                    <label for="">name</label>
                    <input class="product-name" type="text" name >
                </div>

                <div>
                    <label for="">price</label>
                    <input class="product-price" type="text">
                </div>

                <div>
                    <label for="">description</label>
                    <input class="product-description" type="text">
                </div>

                <div>
                    <label for="">image</label>
                    <input class="product-image" type="file">
                </div>

                <button type="submit" >Add</button>
            </form>

        </div>

    </div>
</body>

<script>

    const csrfToken = document.querySelector('.csrfToken').value;

    const admin_content = document.querySelector('.admin-content')
    
    // ------- INITIAL LOAD ------- //
    // - form liseter is set to inital page load

    document.querySelector('form').addEventListener('submit', async (ev) => {
        add_product(ev);
    })

    async function add_product(ev) {
        ev.preventDefault();
 
        const form_data = new FormData();
        form_data.append('name', document.querySelector('.product-name').value);
        form_data.append('price', document.querySelector('.product-price').value);
        form_data.append('description', document.querySelector('.product-description').value);
        form_data.append('image_url', document.querySelector('.product-image').files[0]);

        const res = await fetch(`http://localhost:11111/admin?mode=add-product`, {
            method: "POST",
            headers: {
                "x-csrf-token": csrfToken,
            },
            body: form_data,
        })

        const obj = await res.json();
        console.log(obj);
    }


    // ------- DYNAMIC LOAD ------- //

    // 'CREATE PRODUCT' BUTTON LISTENER //
    document.querySelector('.create-product').addEventListener('click', async (ev) => {
        ev.preventDefault();

        // change current url dynamically
        window.history.pushState({ mode: "add" }, "", "/admin?mode=add-product");

        admin_content.innerHTML = 
        `
             <form enctype="multipart/form-data" >
                <div>
                    <label for="">name</label>
                    <input class="product-name" type="text" name >
                </div>

                <div>
                    <label for="">price</label>
                    <input class="product-price" type="text">
                </div>

                <div>
                    <label for="">description</label>
                    <input class="product-description" type="text">
                </div>

                <div>
                    <label for="">image</label>
                    <input class="product-image" type="file">
                </div>

                <button type="submit" >Add</button>
            </form>

        `

        // form listener is set upon dynamic partial component load
        document.querySelector('form').addEventListener('submit', async (ev) => add_product(ev));
    })

    // 'MY PRODUCT' BUTTON LISTENER //
    document.querySelector('.my-product').addEventListener("click", async (ev) => {
        ev.preventDefault();

        // change current url dynamically
        window.history.pushState({ mode: "view" }, "", "/admin?mode=view_products");  

        const res = await fetch(`http://localhost:11111/admin?mode=view_products`, {
            method: "POST",
            headers: {
                "x-csrf-token": csrfToken,
            },
        });

        const obj = await res.json();
        console.log(obj);

        if(obj.success) {

            admin_content.innerHTML = '';

            for(let product of obj.data.products) {
                const div = document.createElement('div');
                div.classList.add('product')

                div.innerHTML = `
                    <input class="product_id" value="${product.id}" hidden />
                    <img src="/img/${product.image_url === 'null' ? 'images_placeholder.png' : product.image_url}" alt="">
                    <h3>${product.name}</h3>
                    <div>P${product.price}</div>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint id nostrum optio voluptate atque sit quam, quidem nulla illo possimus amet magni animi nihil ad quae quis, omnis qui doloribus?</p>
                `

                admin_content.append(div);

                div.addEventListener('click', ev => display_edit_product(ev))
            }
        }


        async function display_edit_product (ev) {
            ev.preventDefault();

            // change current url dynamically
            const product_id = ev.target.parentElement.children[0].value;
            
            window.history.pushState({ mode: "view" }, "", `/admin?mode=view_product&id=${product_id}`)

            const res = await fetch(`http://localhost:11111/admin?mode=view_product&id=${product_id}`, {
                method: 'POST',
                headers: {
                "x-csrf-token": csrfToken,
            },
            });

            const obj = await res.json();

            if(obj.success) {

                const product = obj.data.product;

                admin_content.innerHTML = 
                `
                    <form class="edit-form" enctype="multipart/form-data" >

                        <div>
                            <label for="">id</label>
                            <input class="product-id" type="text" name="id" value=${product.id} readonly >
                        </div>
                        
                        <div>
                            <label for="">name</label>
                            <input class="product-name" type="text" name="name" value=${product.name} >
                        </div>

                        <div>
                            <label for="">price</label>
                            <input class="product-price" type="text" name="price" value=${product.price} >
                        </div>

                        <div>
                            <label for="">description</label>
                            <input class="product-description" type="text" name="description" value=${product.description} >
                        </div>

                        <div>
                            <label for="">image</label>
                            <input class="product-image" type="file" name="image" >
                        </div>

                        <button type="submit" >Edit</button>
                        <button id="delete-button" type="button" >Delete</button>
                    </form>
                `
                
                // EDIT BUTTON LISTENER
                document.querySelector('form').addEventListener('submit', async (ev) => {
                    ev.preventDefault();

                    console.log("EDIT!")

                    const form_data = new FormData();
                    form_data.append("id", document.querySelector(".product-id").value);
                    form_data.append("name", document.querySelector(".product-name").value);
                    form_data.append("price", document.querySelector(".product-price").value);
                    form_data.append("description", document.querySelector(".product-description").value);
                    form_data.append("image_url", document.querySelector(".product-image").files[0]);

                    const res = await fetch(`http://localhost:11111/admin/edit-product`, {
                        method: "PATCH",
                        headers: {
                            "x-csrf-token": csrfToken,
                        },
                        body: form_data
                    })

                    const obj = await res.json();

                    console.log(obj);
                })

                // DELETE BUTTON LISTENER
                document.querySelector('#delete-button').addEventListener('click', async (ev) => {
                    ev.preventDefault();

                    const product_id = ev.target.parentElement.children[0].children[1].value;

                    const res = await fetch(`http://localhost:11111/admin/delete-product/${product_id}`, {
                        method: "DELETE",
                        headers: {
                            "x-csrf-token": csrfToken,
                        },
                    })

                    const obj = await res.json();

                    console.log(obj);
                })

            }

            

        }

    })


  
</script>

<style>
     .container {
        width: 90%;
        margin: 1rem auto;
        border: 1px solid black;
        padding: 1rem;
    }

    .admin-navbar {
        display: flex;
        justify-self: center;
        gap: 1rem;
    }

    .admin-content {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 2rem;
    }

    /* CREATE PRODUCT COMPONENT  */

    form {
        border: 1px solid black;
        width: 70%;
        padding: 1rem;
        margin-inline: auto;
    }

    button {
        padding: 0.5rem;
    }

    input {
        width: 100%;
    }

    /* USER PRODUCTS COMPONENT */

    .product {
        display: flex;
        flex-direction: column;
        gap: 5px;
        width: 250px;
        height: 300px;
        border: 1px solid black;
        transition: 200ms;
        cursor: pointer;
        padding: 7px;
    }

    .product:hover {
            transform: scale(1.1);
            background-color: blue;
    }

    img {
        height: 60%;
        width: 100%;
        border-radius: 0.3rem;
        object-fit: cover;
        object-position: center;
        display: block;
    }
    
    p {
        display: -webkit-box;             /* Make the element behave like a flex container with multiple lines */
        -webkit-box-orient: vertical;     /* Defines the box's orientation (vertical to wrap text) */
        -webkit-line-clamp: 3;            /* Limit to 3 lines (adjust as needed) */
        overflow: hidden;                 /* Hide the overflow text */
        text-overflow: ellipsis;          /* Add the ellipsis when text overflows */
        line-height: 1.5;     
        font-size: 0.75rem;
    }


</style>